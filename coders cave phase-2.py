# -*- coding: utf-8 -*-
"""Copy of Coders Cave Phase -2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MHsVMQgh_72VtIhiUqSeR8OuYtqajFwI
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
df = pd.read_csv('/content/monthly_data.csv')
df.head()

df.shape

df.tail()

df.describe()

unique_counts=df.nunique()
print(unique_counts)

df.info()

df.isnull().sum()

df.columns

"""CORELATION HEATMAP"""

import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
columns = ['AWND', 'CDSD', 'CLDD', 'DSNW', 'HDSD', 'HTDD',
           'MonthlyDaysWithGT001Precip', 'MonthlyDaysWithGT010Precip',
           'MonthlyDaysWithGT32Temp', 'MonthlyDaysWithGT90Temp',
           'MonthlyDaysWithLT0Temp', 'MonthlyDaysWithLT32Temp',
           'MonthlyDepartureFromNormalAverageTemperature',
           'MonthlyDepartureFromNormalCoolingDegreeDays',
           'MonthlyDepartureFromNormalHeatingDegreeDays',
           'MonthlyDepartureFromNormalMaximumTemperature',
           'MonthlyDepartureFromNormalMinimumTemperature',
           'MonthlyDepartureFromNormalPrecipitation', 'MonthlyGreatestPrecip',
           'MonthlyGreatestSnowDepth', 'MonthlyGreatestSnowfall',
           'MonthlyMaximumTemperature', 'MonthlyMeanTemperature',
           'MonthlyMinimumTemperature', 'MonthlyTotalLiquidPrecipitation',
           'NormalsHeatingDegreeDay']

df[columns] = df[columns].apply(pd.to_numeric, errors='coerce')
correlation_matrix = df[columns].corr()
plt.figure(figsize=(16, 12))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

"""TEMPERATURE ANALYSIS"""

columns_to_plot = ['MonthlyMeanTemperature', 'MonthlyMaximumTemperature', 'MonthlyMinimumTemperature',
                   'MonthlySeaLevelPressure', 'MonthlyMinSeaLevelPressureValue', 'NormalsHeatingDegreeDay']

plt.figure(figsize=(20, 15))

colors = ['skyblue', 'orange', 'green', 'pink', 'purple', 'brown']

for i, (column, color) in enumerate(zip(columns_to_plot, colors), start=1):
    plt.subplot(3,2, i)
    plt.hist(df[column], color=color, bins=20)  # Adjust the number of bins if needed
    plt.title(column)
    plt.xlabel(column.split('Monthly', 1)[-1].split('Value', 1)[-1])  # Extract units from column name
    plt.ylabel('Frequency')
    plt.tight_layout()

plt.show()

"""SEA LEVEL PRESSURE"""

import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("/content/monthly_data.csv")
max_sea_level_pressure = df["MonthlyMaxSeaLevelPressureValue"]
min_sea_level_pressure = df["MonthlyMinSeaLevelPressureValue"]
plt.figure(figsize=(12, 6))
plt.plot(max_sea_level_pressure, label="Maximum Sea Level Pressure")
plt.plot(min_sea_level_pressure, label="Minimum Sea Level Pressure")
mean_max_pressure = max_sea_level_pressure.mean()
mean_min_pressure = min_sea_level_pressure.mean()
plt.axhline(y=mean_max_pressure, color='red', linestyle='dashed', label=f'Mean Max Pressure ({mean_max_pressure:.2f} hPa)')
plt.axhline(y=mean_min_pressure, color='blue', linestyle='dashed', label=f'Mean Min Pressure ({mean_min_pressure:.2f} hPa)')
plt.title("Monthly Sea Level Pressure Time Series")
plt.xlabel("Month")
plt.ylabel("Pressure (hPa)")
plt.legend()
plt.show()

"""PRECIPITATION AND TEMPERATURE"""

precipitation_thresholds = [0.01, 0.10]
temperature_thresholds = [32, 90]

fig, axs = plt.subplots(2, 1, figsize=(10, 8))

# Plot MonthlyDaysWithGT001Precip and MonthlyDaysWithGT010Precip
precipitation_cols = ['MonthlyDaysWithGT001Precip', 'MonthlyDaysWithGT010Precip']
precipitation_labels = ['Precipitation > 0.01 inches', 'Precipitation > 0.10 inches']
for i in range(len(precipitation_cols)):
    ax = axs[0] if i == 0 else axs[1]
    ax.bar(df.index, df[precipitation_cols[i]], label=precipitation_labels[i], alpha=0.7)

# Plot MonthlyDaysWithGT32Temp and MonthlyDaysWithGT90Temp
temperature_cols = ['MonthlyDaysWithGT32Temp', 'MonthlyDaysWithGT90Temp']
temperature_labels = ['Temperature > 32°F', 'Temperature > 90°F']
for i in range(len(temperature_cols)):
    ax = axs[0] if i == 0 else axs[1]
    ax.bar(df.index, df[temperature_cols[i]], label=temperature_labels[i], alpha=0.7)

for ax in axs:
    ax.set_ylabel('Frequency')
    ax.legend()
plt.xlabel('Date')
plt.tight_layout()
plt.show()

"""MONTLY CLIMATIC DEPARTURES FROM AVERAGE"""

import matplotlib.pyplot as plt

fig, axs = plt.subplots(3, 1, figsize=(12, 15))

# Plot Monthly Departure From Normal Average Temperature
axs[0].plot(df.index, df['MonthlyDepartureFromNormalAverageTemperature'], color='blue')
axs[0].set_title('Monthly Departure From Normal Average Temperature')
axs[0].set_xlabel('Date')
axs[0].set_ylabel('Departure (°F)')

# Plot Monthly Departure From Normal Cooling Degree Days
axs[1].bar(df.index, df['MonthlyDepartureFromNormalCoolingDegreeDays'], color='orange')
axs[1].set_title('Monthly Departure From Normal Cooling Degree Days')
axs[1].set_xlabel('Date')
axs[1].set_ylabel('Cooling Degree Days')

# Plot Monthly Departure From Normal Precipitation
axs[2].bar(df.index, df['MonthlyDepartureFromNormalPrecipitation'], color='green')
axs[2].set_title('Monthly Departure From Normal Precipitation')
axs[2].set_xlabel('Date')
axs[2].set_ylabel('Departure (inches)')

# Adjust layout
plt.tight_layout()

# Show plot
plt.show()

"""EXTREME CLIMATIC CONDITIONS"""

df['DATE'] = pd.to_datetime(df['DATE'])
df.set_index('DATE', inplace=True)
precipitation_threshold = 3
temperature_threshold_low = 18
temperature_threshold_high = 40
wind_speed_threshold = 5
extreme_precipitation = df[df['MonthlyTotalLiquidPrecipitation'] > precipitation_threshold]
extreme_high_temp = df[df['MonthlyMaximumTemperature'] > temperature_threshold_high]
extreme_low_temp = df[df['MonthlyMinimumTemperature'] < temperature_threshold_low]
extreme_wind_speed = df[df['AWND'] > wind_speed_threshold]
fig, axes = plt.subplots(2, 2, figsize=(14, 10))
sns.histplot(data=extreme_precipitation, x='MonthlyTotalLiquidPrecipitation', bins=20, kde=True, ax=axes[0, 0])
axes[0, 0].set_title('Extreme Precipitation Events')
sns.histplot(data=extreme_low_temp, x='MonthlyMinimumTemperature', bins=20, kde=True, color='red', ax=axes[1, 0])
axes[1, 0].set_title('Extreme Low Temperature Events')
sns.histplot(data=extreme_wind_speed, x='AWND', bins=20, kde=True, color='green', ax=axes[1, 1])
axes[1, 1].set_title('Extreme Wind Speed Events')
sns.histplot(data=extreme_high_temp, x='MonthlyMaximumTemperature', bins=20, kde=True, color='orange', ax=axes[0, 1])
axes[0, 1].set_title('Extreme High Temperature Events')
plt.tight_layout()
plt.show()

"""LIQUID PRECIPITATION"""

import pandas as pd
from statsmodels.tsa.seasonal import seasonal_decompose
import matplotlib.pyplot as plt
plt.plot(monthly_precip, color='blue')
plt.title("Monthly Total Liquid Precipitation Time Series")
plt.xlabel("Month")
plt.ylabel("Precipitation (mm)")
plt.show()
monthly_precip.hist(figsize=(8, 6), color='green')
plt.xlabel("Monthly Total Liquid Precipitation (mm)")
plt.ylabel("Frequency")
plt.title("Distribution of Monthly Precipitation")
plt.show()

"""FREQUENCY OF WEATHER EVENTS"""

import pandas as pd
df['DATE'] = pd.to_datetime(df['DATE'])
df.set_index('DATE', inplace=True)
columns_for_frequency_analysis = ['MonthlyDaysWithGT001Precip',
                                  'MonthlyDaysWithGT010Precip',
                                  'MonthlyDaysWithGT32Temp',
                                  'MonthlyDaysWithGT90Temp',
                                  'MonthlyDaysWithLT0Temp',
                                  'MonthlyDaysWithLT32Temp']
plt.figure(figsize=(15, 10))
for column in columns_for_frequency_analysis:
    plt.plot(df[column], label=column)

plt.title('Frequency of Weather Events')
plt.xlabel('Date')
plt.ylabel('Frequency')
plt.legend()
plt.show()

"""SEASONAL ANALYSIS"""

import pandas as pd
import matplotlib.pyplot as plt
df['DATE'] = pd.to_datetime(df['DATE'])
df.set_index('DATE', inplace=True)
columns_of_interest = ['MonthlyMeanTemperature', 'MonthlyTotalLiquidPrecipitation']
seasonal_df = df[columns_of_interest]
monthly_seasonal_df = seasonal_df.resample('M').mean()
plt.figure(figsize=(10, 6))
for column in monthly_seasonal_df.columns:
    plt.plot(monthly_seasonal_df.index, monthly_seasonal_df[column], label=column)

plt.title('Seasonal Analysis')
plt.xlabel('Date')
plt.ylabel('Average Value')
plt.legend()
plt.show()

"""ANAMALY DETECTION"""

import numpy as np
mean_temp = df['MonthlyMeanTemperature']
mean = np.mean(mean_temp)
std_dev = np.std(mean_temp)
z_scores = (mean_temp - mean) / std_dev
threshold = 1

anomalies = df[abs(z_scores) > threshold]
plt.figure(figsize=(11, 6))
plt.plot(df.index, mean_temp, label='Monthly Mean Temperature')
plt.scatter(anomalies.index, anomalies['MonthlyMeanTemperature'], color='red', label='Anomalies')
plt.title('Anomaly Detection - Monthly Mean Temperature')
plt.xlabel('Date')
plt.ylabel('Temperature')
plt.legend()
plt.show()

"""REGRESSION ANALYSIS"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
target_variable = 'MonthlyMeanTemperature'
features = ['AWND', 'CDSD', 'CLDD', 'DSNW', 'HDSD', 'HTDD',
                       'MonthlyDaysWithGT001Precip', 'MonthlyDaysWithGT010Precip',
                       'MonthlyDaysWithGT32Temp', 'MonthlyDaysWithGT90Temp',
                       'MonthlyDaysWithLT0Temp', 'MonthlyDaysWithLT32Temp',
                       'MonthlyDepartureFromNormalAverageTemperature',
                       'MonthlyDepartureFromNormalCoolingDegreeDays',
                       'MonthlyDepartureFromNormalHeatingDegreeDays',
                       'MonthlyDepartureFromNormalMaximumTemperature',
                       'MonthlyDepartureFromNormalMinimumTemperature',
                       'MonthlyDepartureFromNormalPrecipitation',
                       'MonthlyMaxSeaLevelPressureValue', 'MonthlyMaximumTemperature',
                       'MonthlyMinimumTemperature', 'MonthlySeaLevelPressure',
                       'MonthlyStationPressure', 'MonthlyTotalLiquidPrecipitation',
                       'NormalsHeatingDegreeDay']
X = df[features]
y = df[target_variable]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
r2 = r2_score(y_test, y_pred)
print('R-squared:', r2)
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)
predictors_with_constant = sm.add_constant(df[predictor_variables])